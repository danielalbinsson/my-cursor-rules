---
description: backend development
globs: 
alwaysApply: false
---
---
description: How to implement Express Js functions
globs: **/*.js,**/*.ts
alwaysApply: false
---
# Express.js rules

- Use proper middleware order:
  1. Body parsers
  2. Custom middleware
  3. Routes
  4. Error handlers

- Organize routes using Express Router for modular code structure:
```typescript
// routes/users.ts
import { Router } from 'express';
const router = Router();

router.get('/', async (req, res) => {
  // Handle route
});

export default router;
```

- Use async/await with proper error handling:
```typescript
app.get('/users', async (req, res, next) => {
  try {
    const users = await getUsers();
    res.json(users);
  } catch (error) {
    next(error);
  }
});
```

- Create a centralized error handler:
```typescript
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});
```

- Use environment variables for configuration
- Implement request validation using express-validator
- Use middleware for authentication and authorization
- Use appropriate HTTP status codes in responses